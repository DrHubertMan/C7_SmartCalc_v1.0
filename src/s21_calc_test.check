#include "calculation_module.h"

#test test_my_atof_1
char *string_double = "3.1415920";
double result = my_atof(string_double);
ck_assert_double_eq(result, 3.1415920);

#test test_my_atof_2
char *string_double = "-3.1415920";
double result = my_atof(string_double);
ck_assert_double_eq(result, -3.1415920);

#test test_my_atof_3
char *string_double = "1";
double result = my_atof(string_double);
ck_assert_double_eq(result, 1.0);

#test test_my_atof_4
char *string_double = "2.2";
double result = my_atof(string_double);
ck_assert_double_eq(result, 2.2);

#test test_my_atof_5
char *string_double = "  2.2";
double result = my_atof(string_double);
ck_assert_double_eq(result, 2.2);

#test test_my_atof_6
char *string_double = "+2.2";
double result = my_atof(string_double);
ck_assert_double_eq(result, 2.2);

#test test_priority_1
char sym = '^';
int result = priority(sym);
ck_assert_int_eq(result, 4);

#test test_priority_2
char sym = '*';
int result = priority(sym);
ck_assert_int_eq(result, 3);

#test test_priority_3
char sym = '/';
int result = priority(sym);
ck_assert_int_eq(result, 3);

#test test_priority_4
char sym = '%';
int result = priority(sym);
ck_assert_int_eq(result, 3);

#test test_priority_5
char sym = '+';
int result = priority(sym);
ck_assert_int_eq(result, 2);

#test test_priority_6
char sym = '-';
int result = priority(sym);
ck_assert_int_eq(result, 2);

#test test_priority_7
char sym = '=';
int result = priority(sym);
ck_assert_int_eq(result, 1);

#test test_priority_8
char sym = 'q';
int result = priority(sym);
ck_assert_int_eq(result, 0);

#test test_is_left_associative_1
char sym = '*';
int result = is_left_associative(sym);
ck_assert_int_eq(result, 1);

#test test_is_left_associative_2
char sym = '/';
int result = is_left_associative(sym);
ck_assert_int_eq(result, 1);

#test test_is_left_associative_3
char sym = '+';
int result = is_left_associative(sym);
ck_assert_int_eq(result, 1);

#test test_is_left_associative_4
char sym = '-';
int result = is_left_associative(sym);
ck_assert_int_eq(result, 1);

#test test_is_left_associative_5
char sym = '%';
int result = is_left_associative(sym);
ck_assert_int_eq(result, 1);

#test test_is_left_associative_6
char sym = '^';
int result = is_left_associative(sym);
ck_assert_int_eq(result, 0);

#test test_is_left_associative_7
char sym = '0';
int result = is_left_associative(sym);
ck_assert_int_eq(result, 0);

#test test_is_function_in_stack_1
char sym = 'A';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_2
char sym = 'B';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_3
char sym = 'C';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_4
char sym = 'D';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_5
char sym = 'E';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_6
char sym = 'F';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_7
char sym = 'G';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_8
char sym = 'H';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_9
char sym = 'I';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 1);

#test test_is_function_in_stack_10
char sym = '=';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 0);

#test test_is_function_in_stack_11
char sym = 'M';
int result = is_function_in_stack(sym);
ck_assert_int_eq(result, 0);

#test test_is_function_1
char *str = "cos";
char result = is_function(str);
char expected_value = 'A';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_2
char *str = "sin";
char result = is_function(str);
char expected_value = 'B';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_3
char *str = "tan";
char result = is_function(str);
char expected_value = 'C';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_4
char *str = "acos";
char result = is_function(str);
char expected_value = 'D';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_5
char *str = "asin";
char result = is_function(str);
char expected_value = 'E';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_6
char *str = "atan";
char result = is_function(str);
char expected_value = 'F';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_7
char *str = "sqrt";
char result = is_function(str);
char expected_value = 'G';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_8
char *str = "ln";
char result = is_function(str);
char expected_value = 'H';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_9
char *str = "log";
char result = is_function(str);
char expected_value = 'I';
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_10
char *str = "tre";
char result = is_function(str);
char expected_value = -1;
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_is_function_11
char *str = "gig";
char result = is_function(str);
char expected_value = -1;
ck_assert_msg(result == expected_value, "Expected '%c' but got '%c'", expected_value, result);

#test test_char_is_operator_1
char sym = '*';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_operator_2
char sym = '+';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_operator_3
char sym = '-';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_operator_4
char sym = '/';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_operator_5
char sym = '%';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_operator_6
char sym = '^';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_operator_7
char sym = '1';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 0);

#test test_char_is_operator_8
char sym = '2';
int result = char_is_operator(sym);
ck_assert_int_eq(result, 0);

#test test_char_is_number_1
char sym = '1';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_2
char sym = '2';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_3
char sym = '3';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_4
char sym = '4';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_5
char sym = '5';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_6
char sym = '6';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_7
char sym = '7';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_8
char sym = '8';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_9
char sym = '9';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_10
char sym = '0';
int result = char_is_number(sym);
ck_assert_int_eq(result, 1);

#test test_char_is_number_11
char sym = '/';
int result = char_is_number(sym);
ck_assert_int_eq(result, 0);

#test test_char_is_number_12
char sym = '\n';
int result = char_is_number(sym);
ck_assert_int_eq(result, 0);

#test test_char_is_number_13
char sym = 'a';
int result = char_is_number(sym);
ck_assert_int_eq(result, 0);

#test test_type_in_output_1
char output[10] = "";
char in = '1';
int i = 0;
type_in_output(output, &i, in);
ck_assert_str_eq(output, "1");

#test test_type_in_output_2
char output[10] = "";
char in = '2';
int i = 0;
type_in_output(output, &i, in);
ck_assert_str_eq(output, "2");

#test test_x_string_1
char *output = "125 + x";
double x_number = 23.12;
char result[MAX_STR];
x_string(&output, x_number, result);
ck_assert_str_eq(result, "125 + 23.1200000");

#test test_x_string_2
char *output = "125 + x";
double x_number = 23.12151689;
char result[MAX_STR];
x_string(&output, x_number, result);
ck_assert_str_eq(result, "125 + 23.1215168");

#test test_x_string_3
char *output = "125 + x + 185";
double x_number = 23.12151689;
char result[MAX_STR];
x_string(&output, x_number, result);
ck_assert_str_eq(result, "125 + 23.1215168 + 185");

#test test_x_string_4
char *output = "x + 125";
double x_number = 23.12151689;
char result[MAX_STR];
x_string(&output, x_number, result);
ck_assert_str_eq(result, "23.1215168 + 125");

#test test_x_string_5
char *output = "x";
double x_number = 23.12151689;
char result[MAX_STR];
x_string(&output, x_number, result);
ck_assert_str_eq(result, "23.1215168");

#test test_x_string_6
char *output = "-x";
double x_number = 23.12151689;
char result[MAX_STR];
x_string(&output, x_number, result);
ck_assert_str_eq(result, "-23.1215168");

#test test_x_string_7
char *output = " x //";
double x_number = 23.12151689;
char result[MAX_STR];
x_string(&output, x_number, result);
ck_assert_str_eq(result, " 23.1215168 //");

#test test_double_to_string_1
char str[MAX_STR];
int precision = 1;
double num = 45.12;
double_to_string(num, str, precision);
ck_assert_str_eq(str, "45.1");

#test test_double_to_string_2
char str[MAX_STR];
int precision = 7;
double num = 45.2223242526;
double_to_string(num, str, precision);
ck_assert_str_eq(str, "45.2223242");

#test test_double_to_string_3
char str[MAX_STR];
int precision = 4;
double num = -45.12123;
double_to_string(num, str, precision);
ck_assert_str_eq(str, "-45.1212");

#test test_double_to_string_4
char str[MAX_STR];
int precision = 1;
double num = 0;
double_to_string(num, str, precision);
ck_assert_str_eq(str, "0");

#test test_double_to_string_5
char str[MAX_STR];
int precision = 0;
double num = 45.12;
double_to_string(num, str, precision);
ck_assert_str_eq(str, "45");

#test test_double_to_string_6
char str[MAX_STR];
int precision = 3;
double num = -0;
double_to_string(num, str, precision);
ck_assert_str_eq(str, "0");

#test test_double_to_string_7
char str[MAX_STR];
int precision = 2;
double num = 45.132;
double_to_string(num, str, precision);
ck_assert_str_eq(str, "45.13");

#test test_sorting_station_1
char *input = "sin(12 + 34 + 82 / (2 * 3))";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "12 34 + 82 2 3 * / + B ");

#test test_sorting_station_2
char *input = "sin(12 + 34 + 82 / (2 * 3)) / cos((8 - 2 * (26 +5)))";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "12 34 + 82 2 3 * / + B 8 2 26 5 + * - A / ");

#test test_sorting_station_3
char *input = "(5.1 * 2 - 7 / (4 - 2)) * (9 + (8 - 4 * 2) * 7) / 2 - 6 * (4 + 2 ^ 3) + 3";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "5.1 2 * 7 4 2 - / - 9 8 4 2 * - 7 * + * 2 / 6 4 2 3 ^ + * - 3 + ");

#test test_sorting_station_4
char *input = "(5 + 6 * 3 ^ 2 / 4) * (7 - 2 * 5) / (2 * 3 + 4) + 8 * (6 - 2) - 1";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "5 6 3 2 ^ * 4 / + 7 2 5 * - * 2 3 * 4 + / 8 6 2 - * + 1 - ");

#test test_sorting_station_5
char *input = "log(5 + 2, 2.6 ^ (sin(32) * cos(45)) - 1.3)";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "5 2 + 2.6 32 B 45 A * ^ 1.3 - I ");

#test test_sorting_station_6
char *input = "sqrt((7.2 * cos(23) - 4.1 * sin(54)) / (3.4 * atan(0.8) + 2.9 * acos(0.3)))";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "7.2 23 A * 4.1 54 B * - 3.4 0.8 F * 2.9 0.3 D * + / G ");

#test test_sorting_station_7
char *input = "ln((2 * tan(17)) / (3 * asin(0.5)))  ";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "2 17 C * 3 0.5 E * / H ");

#test test_sorting_station_8
char *input = "sqrt((7.2 * cos(23) - 4.1 * sin(54)) / (3.4 * atan(0.8) + 2.9 * acos(0.3))) * ln((2 * tan(17)) / (3 * asin(0.5))) + log(5, 2.6 ^ (sin(32) * cos(45)) - 1.3)";
char output[MAX_STR];
ck_assert_int_eq(sorting_station(input, output), 0);
ck_assert_str_eq(output, "7.2 23 A * 4.1 54 B * - 3.4 0.8 F * 2.9 0.3 D * + / G 2 17 C * 3 0.5 E * / H * 5 2.6 32 B 45 A * ^ 1.3 - I + ");